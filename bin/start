#!/usr/bin/env node
/* eslint strict: 0 */

'use strict'

/**
 * Module dependencies.
 */

// enables ES6 ('import'.. etc) in Node
require('babel-core/register')
require('babel-polyfill')

const app = require('../app').default
const debug = require('debug')('mattermost-plugins:server')
const http = require('http')
const https = require('https')
const fs = require('fs')

require('dotenv').config()

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3002')
app.set('port', port)

/**
 * Create HTTP server.
 */

let server

if (process.env.HTTPS.toLowerCase() === 'true') {
  var privateKey = fs.readFileSync(process.env.SSL_KEY, 'utf8')
  var certificate = fs.readFileSync(process.env.SSL_CERT, 'utf8')

  var credentials = { key: privateKey, cert: certificate }
  server = https.createServer(credentials, app)
} else {
  server = http.createServer(app)
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)

/**
 * Event listener for HTTP server "error" event.
 */

server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(`${bind} requires elevated privileges`)
      process.exit(1)
    case 'EADDRINUSE':
      debug(`${bind} is already in use`)
      process.exit(1)
    default:
      throw error
  }
})

/**
 * Event listener for HTTP server "listening" event.
 */

server.on('listening', () => {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`
  debug(`Listening on ${bind}`)
})
